
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ldljobamskuimpufpkpk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxkbGpvYmFtc2t1aW1wdWZwa3BrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzOTQ1MDQsImV4cCI6MjA1OTk3MDUwNH0.eVnNpTeZah3dD4-YymVXyVagKRgUbSEkSJkwxGaCR20";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Custom type definition to work around type issues until types.ts is updated
type CustomDatabase = Database & {
  public: {
    Tables: {
      brand_tasks: {
        Row: {
          id: string;
          brand: string;
          category: string | null;
          brief: string;
          description: string | null;
          budget: string | null;
          platform: string | null;
          reward: string | null;
          type: string | null;
          progress: number | null;
          participants: number | null;
          created_at: string | null;
          updated_at: string | null;
        };
      };
      templates: {
        Row: {
          id: string;
          title: string;
          description: string | null;
          image_url: string | null;
          content: string | null;
          created_at: string | null;
          updated_at: string | null;
          user_id: string | null;
          is_public: boolean | null;
        };
      };
      trending_topics: {
        Row: {
          id: string;
          title: string;
          hot: number | null;
          match: number | null;
          created_at: string | null;
          updated_at: string | null;
        };
      };
    };
    Buckets: {
      [key: string]: {
        Row: {
          id: string;
          name: string;
          owner: string | null;
          created_at: string | null;
          updated_at: string | null;
          public: boolean | null;
        };
      };
    };
  };
};

export const supabase = createClient<CustomDatabase>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to check if a storage bucket exists and is accessible
export const checkStorageBucket = async (bucketName: string): Promise<boolean> => {
  try {
    console.log(`Checking if storage bucket '${bucketName}' exists...`);
    
    // First attempt to list the bucket to see if it's accessible
    try {
      const { data: files, error } = await supabase.storage.from(bucketName).list();
      
      if (!error) {
        console.log(`Successfully accessed bucket '${bucketName}' and found ${files.length} files`);
        return true;
      }
      
      // If we get an error from listing, it might be permissions or the bucket doesn't exist
      console.log(`Error listing files in bucket '${bucketName}':`, error.message);
    } catch (e) {
      console.error(`Exception when listing files in '${bucketName}':`, e);
    }
    
    // As a fallback, try to list all buckets to see if our bucket is in the list
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error("Error listing buckets:", bucketsError);
      return false;
    }
    
    const bucket = buckets?.find(bucket => bucket.name === bucketName);
    console.log(`Bucket '${bucketName}' exists in bucket list:`, !!bucket);
    
    if (bucket) {
      // Bucket exists in the list, but we had issues accessing it
      console.log(`Bucket '${bucketName}' exists but may have permission issues`);
      return true;
    }
    
    return false;
  } catch (err) {
    console.error(`Error checking bucket ${bucketName}:`, err);
    return false;
  }
};

// Helper function to create a storage bucket if it doesn't exist
export const ensureStorageBucket = async (bucketName: string): Promise<boolean> => {
  try {
    // First check if the bucket exists
    const bucketExists = await checkStorageBucket(bucketName);
    
    if (bucketExists) {
      console.log(`Bucket '${bucketName}' already exists`);
      return true;
    }
    
    // Try to create the bucket
    console.log(`Attempting to create bucket '${bucketName}'...`);
    const { data, error } = await supabase.storage.createBucket(bucketName, {
      public: true,
      fileSizeLimit: 1024 * 1024 * 10, // 10MB
    });
    
    if (error) {
      console.error(`Error creating bucket '${bucketName}':`, error);
      return false;
    }
    
    console.log(`Successfully created bucket '${bucketName}'`);
    return true;
  } catch (err) {
    console.error(`Error ensuring bucket ${bucketName}:`, err);
    return false;
  }
};

// Helper function to handle template operations
export const saveTemplate = async (templateData: {
  title: string;
  description?: string;
  image_url?: string;
  content?: string;
  user_id?: string;
  is_public?: boolean;
}): Promise<{ data: any; error: any }> => {
  try {
    console.log("Saving template with data:", templateData);
    
    const { data, error } = await supabase
      .from('templates')
      .insert(templateData)
      .select()
      .single();
    
    if (error) {
      console.error("Error saving template:", error);
      return { data: null, error };
    }
    
    console.log("Template saved successfully:", data);
    return { data, error: null };
  } catch (err) {
    console.error("Exception saving template:", err);
    return { data: null, error: err };
  }
};
